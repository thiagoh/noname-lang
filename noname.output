Terminals unused in grammar

   "line_break"
   "letter"
   "digit"
   "digits"
   "darrow"
   "else"
   "false"
   "if"
   "in"
   "loop"
   "then"
   "while"
   "break"
   "case"
   "new"
   "not"
   "true"
   "newline"
   "notnewline"
   "whitespace"
   "le"
   "nullch"
   "backslash"
   "star"
   "notstar"
   "leftparen"
   "notleftparen"
   "rightparen"
   "notrightparen"
   "line_comment"
   "start_comment"
   "end_comment"
   "quotes"
   "error"
   "declaration"
   "assignment"
   "optional_ret_stmt"
   "expression"
   "function_def"
   "stmt_list"
   "ne_stmt_list"
   "exp_list"
   "ne_exp_list"
   "arg_list"
   "ne_arg_list"
   "arg"
   "import"
   "statement"


Grammar

    0 $accept: prog $end

    1 prog: %empty
    2     | prog stmt
    3     | error "stmt_sep"

    4 stmt_list: %empty
    5          | stmt
    6          | ne_stmt_list stmt

    7 ne_stmt_list: stmt
    8             | ne_stmt_list stmt

    9 stmt: declaration "stmt_sep"
   10     | assignment "stmt_sep"
   11     | import "stmt_sep"
   12     | function_def optional_stmt_sep
   13     | exp "stmt_sep"

   14 optional_stmt_sep: %empty
   15                  | "stmt_sep"

   16 @1: %empty

   17 $@2: %empty

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}'

   19 optional_ret_stmt: %empty
   20                  | "return" exp "stmt_sep"

   21 import: "#import" "string_constant"

   22 assignment: "identifier" "assign" exp
   23           | "let" "identifier" "assign" exp

   24 declaration: "let" "identifier"

   25 exp: "identifier"
   26    | "string_constant"
   27    | "long"
   28    | "double"
   29    | exp "+" exp
   30    | exp "-" exp
   31    | exp "*" exp
   32    | exp "/" exp
   33    | "-" exp
   34    | exp "^" exp
   35    | '(' exp ')'
   36    | "identifier" '(' exp_list ')'

   37 arg_list: %empty
   38         | arg
   39         | ne_arg_list ',' arg

   40 ne_arg_list: arg
   41            | ne_arg_list ',' arg

   42 arg: "identifier"
   43    | "identifier" "assign" "double"
   44    | "identifier" "assign" "long"
   45    | "identifier" "assign" "string_constant"

   46 exp_list: %empty
   47         | exp "stmt_sep"
   48         | ne_exp_list exp "stmt_sep"

   49 ne_exp_list: exp "stmt_sep"
   50            | ne_exp_list exp "stmt_sep"


Terminals, with rules where they appear

$end (0) 0
'(' (40) 18 35 36
')' (41) 18 35 36
"*" (42) 31
"+" (43) 29
',' (44) 39 41
"-" (45) 30 33
"/" (47) 32
"^" (94) 34
'{' (123) 18
'}' (125) 18
error (256) 3
"line_break" (258)
"#import" (259) 21
"stmt_sep" (260) 3 9 10 11 13 15 20 47 48 49 50
"letter" (261)
"digit" (262)
"digits" (263)
"darrow" (264)
"else" (265)
"false" (266)
"if" (267)
"in" (268)
"let" (269) 23 24
"def" (270) 18
"loop" (271)
"then" (272)
"while" (273)
"break" (274)
"case" (275)
"new" (276)
"not" (277)
"return" (278) 20
"true" (279)
"newline" (280)
"notnewline" (281)
"whitespace" (282)
"le" (283)
"assign" (284) 22 23 43 44 45
"nullch" (285)
"backslash" (286)
"star" (287)
"notstar" (288)
"leftparen" (289)
"notleftparen" (290)
"rightparen" (291)
"notrightparen" (292)
"line_comment" (293)
"start_comment" (294)
"end_comment" (295)
"quotes" (296)
"error" (297)
"identifier" (298) 18 22 23 24 25 36 42 43 44 45
"string_constant" (299) 21 26 45
"double" (300) 28 43
"long" (301) 27 44
"declaration" (302)
"assignment" (303)
"optional_ret_stmt" (304)
"expression" (305)
"function_def" (306)
"stmt_list" (307)
"ne_stmt_list" (308)
"exp_list" (309)
"ne_exp_list" (310)
"arg_list" (311)
"ne_arg_list" (312)
"arg" (313)
"import" (314)
"statement" (315)
NEG (316)


Nonterminals, with rules where they appear

$accept (72)
    on left: 0
prog (73)
    on left: 1 2 3, on right: 0 2
stmt_list (74)
    on left: 4 5 6, on right: 18
ne_stmt_list (75)
    on left: 7 8, on right: 6 8
stmt (76)
    on left: 9 10 11 12 13, on right: 2 5 6 7 8
optional_stmt_sep (77)
    on left: 14 15, on right: 12
function_def (78)
    on left: 18, on right: 12
@1 (79)
    on left: 16, on right: 18
$@2 (80)
    on left: 17, on right: 18
optional_ret_stmt (81)
    on left: 19 20, on right: 18
import (82)
    on left: 21, on right: 11
assignment (83)
    on left: 22 23, on right: 10
declaration (84)
    on left: 24, on right: 9
exp (85)
    on left: 25 26 27 28 29 30 31 32 33 34 35 36, on right: 13 20 22
    23 29 30 31 32 33 34 35 47 48 49 50
arg_list (86)
    on left: 37 38 39, on right: 18
ne_arg_list (87)
    on left: 40 41, on right: 39 41
arg (88)
    on left: 42 43 44 45, on right: 38 39 40 41
exp_list (89)
    on left: 46 47 48, on right: 36
ne_exp_list (90)
    on left: 49 50, on right: 48 50


State 0

    0 $accept: . prog $end

    error  shift, and go to state 1

    $end               reduce using rule 1 (prog)
    "#import"          reduce using rule 1 (prog)
    "let"              reduce using rule 1 (prog)
    "def"              reduce using rule 1 (prog)
    "-"                reduce using rule 1 (prog)
    "identifier"       reduce using rule 1 (prog)
    "string_constant"  reduce using rule 1 (prog)
    "double"           reduce using rule 1 (prog)
    "long"             reduce using rule 1 (prog)
    '('                reduce using rule 1 (prog)

    prog  go to state 2


State 1

    3 prog: error . "stmt_sep"

    "stmt_sep"  shift, and go to state 3


State 2

    0 $accept: prog . $end
    2 prog: prog . stmt

    $end               shift, and go to state 4
    "#import"          shift, and go to state 5
    "let"              shift, and go to state 6
    "def"              shift, and go to state 7
    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 9
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    stmt          go to state 14
    function_def  go to state 15
    import        go to state 16
    assignment    go to state 17
    declaration   go to state 18
    exp           go to state 19


State 3

    3 prog: error "stmt_sep" .

    $default  reduce using rule 3 (prog)


State 4

    0 $accept: prog $end .

    $default  accept


State 5

   21 import: "#import" . "string_constant"

    "string_constant"  shift, and go to state 20


State 6

   23 assignment: "let" . "identifier" "assign" exp
   24 declaration: "let" . "identifier"

    "identifier"  shift, and go to state 21


State 7

   18 function_def: "def" . "identifier" @1 '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}'

    "identifier"  shift, and go to state 22


State 8

   33 exp: "-" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 24


State 9

   22 assignment: "identifier" . "assign" exp
   25 exp: "identifier" .
   36    | "identifier" . '(' exp_list ')'

    "assign"  shift, and go to state 25
    '('       shift, and go to state 26

    $default  reduce using rule 25 (exp)


State 10

   26 exp: "string_constant" .

    $default  reduce using rule 26 (exp)


State 11

   28 exp: "double" .

    $default  reduce using rule 28 (exp)


State 12

   27 exp: "long" .

    $default  reduce using rule 27 (exp)


State 13

   35 exp: '(' . exp ')'

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 27


State 14

    2 prog: prog stmt .

    $default  reduce using rule 2 (prog)


State 15

   12 stmt: function_def . optional_stmt_sep

    "stmt_sep"  shift, and go to state 28

    $default  reduce using rule 14 (optional_stmt_sep)

    optional_stmt_sep  go to state 29


State 16

   11 stmt: import . "stmt_sep"

    "stmt_sep"  shift, and go to state 30


State 17

   10 stmt: assignment . "stmt_sep"

    "stmt_sep"  shift, and go to state 31


State 18

    9 stmt: declaration . "stmt_sep"

    "stmt_sep"  shift, and go to state 32


State 19

   13 stmt: exp . "stmt_sep"
   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "stmt_sep"  shift, and go to state 33
    "+"         shift, and go to state 34
    "-"         shift, and go to state 35
    "/"         shift, and go to state 36
    "*"         shift, and go to state 37
    "^"         shift, and go to state 38


State 20

   21 import: "#import" "string_constant" .

    $default  reduce using rule 21 (import)


State 21

   23 assignment: "let" "identifier" . "assign" exp
   24 declaration: "let" "identifier" .

    "assign"  shift, and go to state 39

    $default  reduce using rule 24 (declaration)


State 22

   18 function_def: "def" "identifier" . @1 '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}'

    $default  reduce using rule 16 (@1)

    @1  go to state 40


State 23

   25 exp: "identifier" .
   36    | "identifier" . '(' exp_list ')'

    '('  shift, and go to state 26

    $default  reduce using rule 25 (exp)


State 24

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   33    | "-" exp .
   34    | exp . "^" exp

    $default  reduce using rule 33 (exp)


State 25

   22 assignment: "identifier" "assign" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 41


State 26

   36 exp: "identifier" '(' . exp_list ')'

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    $default  reduce using rule 46 (exp_list)

    exp          go to state 42
    exp_list     go to state 43
    ne_exp_list  go to state 44


State 27

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp
   35    | '(' exp . ')'

    "+"  shift, and go to state 34
    "-"  shift, and go to state 35
    "/"  shift, and go to state 36
    "*"  shift, and go to state 37
    "^"  shift, and go to state 38
    ')'  shift, and go to state 45


State 28

   15 optional_stmt_sep: "stmt_sep" .

    $default  reduce using rule 15 (optional_stmt_sep)


State 29

   12 stmt: function_def optional_stmt_sep .

    $default  reduce using rule 12 (stmt)


State 30

   11 stmt: import "stmt_sep" .

    $default  reduce using rule 11 (stmt)


State 31

   10 stmt: assignment "stmt_sep" .

    $default  reduce using rule 10 (stmt)


State 32

    9 stmt: declaration "stmt_sep" .

    $default  reduce using rule 9 (stmt)


State 33

   13 stmt: exp "stmt_sep" .

    $default  reduce using rule 13 (stmt)


State 34

   29 exp: exp "+" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 46


State 35

   30 exp: exp "-" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 47


State 36

   32 exp: exp "/" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 48


State 37

   31 exp: exp "*" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 49


State 38

   34 exp: exp "^" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 50


State 39

   23 assignment: "let" "identifier" "assign" . exp

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 51


State 40

   18 function_def: "def" "identifier" @1 . '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}'

    '('  shift, and go to state 52


State 41

   22 assignment: "identifier" "assign" exp .
   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "+"  shift, and go to state 34
    "-"  shift, and go to state 35
    "/"  shift, and go to state 36
    "*"  shift, and go to state 37
    "^"  shift, and go to state 38

    $default  reduce using rule 22 (assignment)


State 42

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp
   47 exp_list: exp . "stmt_sep"
   49 ne_exp_list: exp . "stmt_sep"

    "stmt_sep"  shift, and go to state 53
    "+"         shift, and go to state 34
    "-"         shift, and go to state 35
    "/"         shift, and go to state 36
    "*"         shift, and go to state 37
    "^"         shift, and go to state 38


State 43

   36 exp: "identifier" '(' exp_list . ')'

    ')'  shift, and go to state 54


State 44

   48 exp_list: ne_exp_list . exp "stmt_sep"
   50 ne_exp_list: ne_exp_list . exp "stmt_sep"

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 55


State 45

   35 exp: '(' exp ')' .

    $default  reduce using rule 35 (exp)


State 46

   29 exp: exp . "+" exp
   29    | exp "+" exp .
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "/"  shift, and go to state 36
    "*"  shift, and go to state 37
    "^"  shift, and go to state 38

    $default  reduce using rule 29 (exp)


State 47

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   30    | exp "-" exp .
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "/"  shift, and go to state 36
    "*"  shift, and go to state 37
    "^"  shift, and go to state 38

    $default  reduce using rule 30 (exp)


State 48

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   32    | exp "/" exp .
   34    | exp . "^" exp

    "^"  shift, and go to state 38

    $default  reduce using rule 32 (exp)


State 49

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   31    | exp "*" exp .
   32    | exp . "/" exp
   34    | exp . "^" exp

    "^"  shift, and go to state 38

    $default  reduce using rule 31 (exp)


State 50

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp
   34    | exp "^" exp .

    "^"  shift, and go to state 38

    $default  reduce using rule 34 (exp)


State 51

   23 assignment: "let" "identifier" "assign" exp .
   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "+"  shift, and go to state 34
    "-"  shift, and go to state 35
    "/"  shift, and go to state 36
    "*"  shift, and go to state 37
    "^"  shift, and go to state 38

    $default  reduce using rule 23 (assignment)


State 52

   18 function_def: "def" "identifier" @1 '(' . arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}'

    "identifier"  shift, and go to state 56

    $default  reduce using rule 37 (arg_list)

    arg_list     go to state 57
    ne_arg_list  go to state 58
    arg          go to state 59


State 53

   47 exp_list: exp "stmt_sep" .
   49 ne_exp_list: exp "stmt_sep" .

    ')'       reduce using rule 47 (exp_list)
    $default  reduce using rule 49 (ne_exp_list)


State 54

   36 exp: "identifier" '(' exp_list ')' .

    $default  reduce using rule 36 (exp)


State 55

   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp
   48 exp_list: ne_exp_list exp . "stmt_sep"
   50 ne_exp_list: ne_exp_list exp . "stmt_sep"

    "stmt_sep"  shift, and go to state 60
    "+"         shift, and go to state 34
    "-"         shift, and go to state 35
    "/"         shift, and go to state 36
    "*"         shift, and go to state 37
    "^"         shift, and go to state 38


State 56

   42 arg: "identifier" .
   43    | "identifier" . "assign" "double"
   44    | "identifier" . "assign" "long"
   45    | "identifier" . "assign" "string_constant"

    "assign"  shift, and go to state 61

    $default  reduce using rule 42 (arg)


State 57

   18 function_def: "def" "identifier" @1 '(' arg_list . ')' $@2 '{' stmt_list optional_ret_stmt '}'

    ')'  shift, and go to state 62


State 58

   39 arg_list: ne_arg_list . ',' arg
   41 ne_arg_list: ne_arg_list . ',' arg

    ','  shift, and go to state 63


State 59

   38 arg_list: arg .
   40 ne_arg_list: arg .

    ','       reduce using rule 40 (ne_arg_list)
    $default  reduce using rule 38 (arg_list)


State 60

   48 exp_list: ne_exp_list exp "stmt_sep" .
   50 ne_exp_list: ne_exp_list exp "stmt_sep" .

    ')'       reduce using rule 48 (exp_list)
    $default  reduce using rule 50 (ne_exp_list)


State 61

   43 arg: "identifier" "assign" . "double"
   44    | "identifier" "assign" . "long"
   45    | "identifier" "assign" . "string_constant"

    "string_constant"  shift, and go to state 64
    "double"           shift, and go to state 65
    "long"             shift, and go to state 66


State 62

   18 function_def: "def" "identifier" @1 '(' arg_list ')' . $@2 '{' stmt_list optional_ret_stmt '}'

    $default  reduce using rule 17 ($@2)

    $@2  go to state 67


State 63

   39 arg_list: ne_arg_list ',' . arg
   41 ne_arg_list: ne_arg_list ',' . arg

    "identifier"  shift, and go to state 56

    arg  go to state 68


State 64

   45 arg: "identifier" "assign" "string_constant" .

    $default  reduce using rule 45 (arg)


State 65

   43 arg: "identifier" "assign" "double" .

    $default  reduce using rule 43 (arg)


State 66

   44 arg: "identifier" "assign" "long" .

    $default  reduce using rule 44 (arg)


State 67

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 . '{' stmt_list optional_ret_stmt '}'

    '{'  shift, and go to state 69


State 68

   39 arg_list: ne_arg_list ',' arg .
   41 ne_arg_list: ne_arg_list ',' arg .

    ','       reduce using rule 41 (ne_arg_list)
    $default  reduce using rule 39 (arg_list)


State 69

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 '{' . stmt_list optional_ret_stmt '}'

    "#import"          shift, and go to state 5
    "let"              shift, and go to state 6
    "def"              shift, and go to state 7
    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 9
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    $default  reduce using rule 4 (stmt_list)

    stmt_list     go to state 70
    ne_stmt_list  go to state 71
    stmt          go to state 72
    function_def  go to state 15
    import        go to state 16
    assignment    go to state 17
    declaration   go to state 18
    exp           go to state 19


State 70

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 '{' stmt_list . optional_ret_stmt '}'

    "return"  shift, and go to state 73

    $default  reduce using rule 19 (optional_ret_stmt)

    optional_ret_stmt  go to state 74


State 71

    6 stmt_list: ne_stmt_list . stmt
    8 ne_stmt_list: ne_stmt_list . stmt

    "#import"          shift, and go to state 5
    "let"              shift, and go to state 6
    "def"              shift, and go to state 7
    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 9
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    stmt          go to state 75
    function_def  go to state 15
    import        go to state 16
    assignment    go to state 17
    declaration   go to state 18
    exp           go to state 19


State 72

    5 stmt_list: stmt .
    7 ne_stmt_list: stmt .

    "return"  reduce using rule 5 (stmt_list)
    '}'       reduce using rule 5 (stmt_list)
    $default  reduce using rule 7 (ne_stmt_list)


State 73

   20 optional_ret_stmt: "return" . exp "stmt_sep"

    "-"                shift, and go to state 8
    "identifier"       shift, and go to state 23
    "string_constant"  shift, and go to state 10
    "double"           shift, and go to state 11
    "long"             shift, and go to state 12
    '('                shift, and go to state 13

    exp  go to state 76


State 74

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt . '}'

    '}'  shift, and go to state 77


State 75

    6 stmt_list: ne_stmt_list stmt .
    8 ne_stmt_list: ne_stmt_list stmt .

    "return"  reduce using rule 6 (stmt_list)
    '}'       reduce using rule 6 (stmt_list)
    $default  reduce using rule 8 (ne_stmt_list)


State 76

   20 optional_ret_stmt: "return" exp . "stmt_sep"
   29 exp: exp . "+" exp
   30    | exp . "-" exp
   31    | exp . "*" exp
   32    | exp . "/" exp
   34    | exp . "^" exp

    "stmt_sep"  shift, and go to state 78
    "+"         shift, and go to state 34
    "-"         shift, and go to state 35
    "/"         shift, and go to state 36
    "*"         shift, and go to state 37
    "^"         shift, and go to state 38


State 77

   18 function_def: "def" "identifier" @1 '(' arg_list ')' $@2 '{' stmt_list optional_ret_stmt '}' .

    $default  reduce using rule 18 (function_def)


State 78

   20 optional_ret_stmt: "return" exp "stmt_sep" .

    $default  reduce using rule 20 (optional_ret_stmt)
